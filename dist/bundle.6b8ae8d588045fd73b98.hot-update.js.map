{"version":3,"file":"bundle.6b8ae8d588045fd73b98.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAmBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AAAA;;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtHA","sources":["webpack:///./src/components/form.js","webpack:///webpack/runtime/getFullHash"],"sourcesContent":["let _config = {\r\n    selector: 'form',\r\n    title: 'Test',\r\n    source: 'Test',\r\n    link: location.href,\r\n    requestURL: atob('aHR0cHM6Ly9za2lka2EtdHV0LmJ5L2FjdGlvbi9pbmRleC5waHA='),\r\n    requestMethod: 'POST',\r\n    resetFormAfterRequest: true,\r\n    doneCallback: response => {\r\n        if (response?.responseText && JSON.parse(response.responseText)?.text) {\r\n            alert(JSON.parse(response.responseText).text)\r\n            return true;\r\n        }\r\n    },\r\n    errorMessage: 'There was a request error. Please contact your manager by phone!',\r\n    repeatMessage: 'You have already sent your appeal, do I have to do it again?',\r\n    testMode: true\r\n}\r\n\r\nexport default (config = {}) => {\r\n    _config = { ..._config, ...config }\r\n    const forms = document.querySelectorAll(_config.selector)\r\n    Array.prototype.forEach.call(forms, form => {\r\n        form.addEventListener('submit', event => {\r\n            event.preventDefault()\r\n            submitHandler(event.target)\r\n        })\r\n    })\r\n}\r\n\r\nconst submitHandler = form => {\r\n\r\n    if (checkIsFormSubmitted()) return false\r\n\r\n    const data = getData(form)\r\n\r\n    if (_config.resetFormAfterRequest) form.reset()\r\n\r\n    sendData(data, response => {\r\n        if (response.type === 'error') {\r\n            alert(response.message)\r\n        }\r\n    })\r\n\r\n    dispatchSendEvent()\r\n}\r\n\r\nconst checkIsFormSubmitted = () => {\r\n    if (typeof sessionStorage !== 'undefined') {\r\n        if (sessionStorage.getItem('formSubmitted')) {\r\n            return !confirm(_config.repeatMessage)\r\n        } else {\r\n            sessionStorage.setItem('formSubmitted', 'true')\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nconst getData = (form) => {\r\n    const { title, source, link } = _config\r\n    const formData = new FormData(form)\r\n    formData.append('source', source)\r\n    formData.append('title', title)\r\n    formData.append('link', link)\r\n\r\n    return formData\r\n}\r\n\r\nconst sendData = (data, callback = f => f) => {\r\n    const { requestURL, requestMethod } = _config\r\n\r\n    const request = new XMLHttpRequest()\r\n\r\n    request.addEventListener(\"load\", function ({ target: response }) {\r\n        if (response.status === 200) {\r\n            if (typeof _config.doneCallback === \"function\" && _config.doneCallback(response)) {\r\n                return true\r\n            }\r\n\r\n            return alert(response.responseText)\r\n        }\r\n\r\n        callback({\r\n            type: 'error',\r\n            message: _config.errorMessage\r\n        })\r\n    }, false)\r\n    request.addEventListener(\"error\", function onError() {\r\n        callback({\r\n            type: 'error',\r\n            message: _config.errorMessage\r\n        })\r\n    }, false)\r\n\r\n\r\n    request.open(requestMethod, requestURL)\r\n    request.setRequestHeader('X-Requested-With', 'XMLHttpRequest')\r\n\r\n    if (_config.testMode) {\r\n        let testing = {}\r\n        data.forEach(function (value, key) {\r\n            testing[key] = value\r\n        })\r\n        console.log(testing)\r\n    } else {\r\n        request.send(data)\r\n    }\r\n}\r\n\r\nconst dispatchSendEvent = () => {\r\n    // Event dispatcher for IE9+ included\r\n    if (typeof (Event) === 'function') {\r\n        document.dispatchEvent(new Event('app.form.send'))\r\n    } else {\r\n        const ev = document.createEvent('Event')\r\n        ev.initEvent('app.form.send', false, false)\r\n        document.dispatchEvent(ev)\r\n    }\r\n}\r\n","__webpack_require__.h = function() { return \"82a44500b5f59f3a25fd\"; }"],"names":[],"sourceRoot":""}